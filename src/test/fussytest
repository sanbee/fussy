#!/bin/bash 
# *****************************************************************
# * Copyright (c) 2000-2018, 2019 S.Bhatnagar
# *
# *  This file is part of fussy.
# *
# *  fussy is a free software: you can redistribute it and/or modify
# *  it under the terms of the GNU General Public License as published by
# *  the Free Software Foundation, either version 3 of the License, or
# *  (at your option) any later version.
# *
# *  fussy is distributed in the hope that it will be useful,
# *  but WITHOUT ANY WARRANTY; without even the implied warranty of
# *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# *  GNU General Public License for more details.
# *
# *  You should have received a copy of the GNU General Public License
# *  along with fussy.  If not, see <https://www.gnu.org/licenses/>.
# *
#
#  History:
#
#     First version.
#                Sanjay Bhatnagar, Dec 2001
#                sanjay@ncra.tifr.res.in
#
# ******************************************************************

#
#--------------------------------------------------------------
#
let NFailed=0;
PrintStatus()
{
  let i=$2;
  STATUS="[FAILED]";

  if [ -z "$1" ];
  then
    STATUS="[PASSED]";
  fi

  if [ $i -gt 0 ];
  then
    while [ $i -ne 0 ]; 
    do 
      echo -n ' '; 
      let i=i-1; 
    done; 
  fi; 
  echo $STATUS;

  if [ $STATUS = "[FAILED]" ];
  then
    let NFailed=NFailed+1;
    echo "###Output of the above test = ";
    eval $3;
  fi;
}    
#
#--------------------------------------------------------------
#
# $1: The binary program to test
# $2: List of unit test names
# $3: Test type (e.g. "unit", "error-condition")
# $4: The filter
run()
{
    Prog=$1;
    TestList=$2;
    TestType=$3;
    Filter=$4;
    if [ -e $Prog ]; then 
	echo 'Testing '$Prog' for the following '$TestType' tests:';
	echo -e '\t'$TestList;
	echo;
	ProgBasename=`basename "$Prog"`

	# Run functional unit tests
	for f in $TestList
	do
	    c="("$Prog" "-q" "$f" $TestDir/quit )$Filter | diff - "$f.out" | grep -v '^> \/\*' | grep '^[<|>]'";
	    cmd="($ProgBasename -q "$f" $TestDir/quit )$Filter  | diff - "$f.out" | grep -v '^> \/\*' | grep '^[<|>]'";
	    msg="$TestType test: "$cmd;
	    wc=`echo $msg|wc -c`;
	    let n=85-wc;
	    echo -n $msg'...';
	    r=`eval $c`;
	    PrintStatus "$r" $n "$c";
	done
    else
	echo $0": $Prog not found!";
	exit 1;
    fi
#  if [ $NFailed -gt 0 ];
#  then
#     exit 1;
#  fi 
}
#
#--------------------------------------------------------------
#
TestDir=`dirname $0`
FUSSY=./fussy
if [ "$#" -gt 0 ]; then
    FUSSY=$1;
fi
#
#--------------------------------------------------------------
#
# Make a list of functional unit tests (file name convention: "test."+NAME)
tmp=`ls $TestDir/test.*`;
UnitTests=`for f in $tmp; do echo $f | grep -v out;done;`
Filter="2> /dev/null";

run "$FUSSY" "$UnitTests" "Unit" "$Filter"
echo
#
#--------------------------------------------------------------
#
# Make a list of error-condition unit tests (file name convention: "error.test."+NAME)
tmp=`ls $TestDir/error.*`;
ErrorUnitTests=`for f in $tmp; do echo $f | grep -v out;done;`
Filter="2>&1 | grep -v Informational"

run "$FUSSY" "$ErrorUnitTests" "Error-condition" "$Filter"
#
#--------------------------------------------------------------
#
exit $NFailed;

