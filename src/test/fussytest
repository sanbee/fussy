#!/bin/bash 

#
#--------------------------------------------------------------
#
PrintStatus()
{
  let i=$2;
  STATUS="[FAILED]";

  if [ -z "$1" ];
  then
    STATUS="[PASSED]";
  fi

  if [ $i -gt 0 ];
  then
    while [ $i -ne 0 ]; 
    do 
      echo -n ' '; 
      let i=i-1; 
    done; 
  fi; 
  echo $STATUS;

  if [ $STATUS = "[FAILED]" ];
  then
    echo "###Output of the above test = ";
    eval $3;
  fi;
}    
#
#--------------------------------------------------------------
#
# $1: The binary program to test
# $2: List of unit test names
# $3: Test type (e.g. "unit", "error-condition")
# $4: The filter
run()
{
    Prog=$1;
    TestList=$2;
    TestType=$3;
    Filter=$4;
    if [ -e $Prog ]; then 
	echo 'Testing '$Prog' for the following '$TestType' tests:';
	echo -e '\t'$TestList;
	echo;
	ProgBasename=`basename "$Prog"`

	# Run functional unit tests
	for f in $TestList
	do
	    c="("$Prog" "$f" $TestDir/quit )$Filter | diff - "$f.out;
	    cmd="($ProgBasename "$f" $TestDir/quit )$Filter  | diff - "$f.out;
	    msg="$TestType test: "$cmd;
	    wc=`echo $msg|wc -c`;
	    let n=85-wc;
	    echo -n $msg'...';
	    r=`eval $c`;
	    PrintStatus "$r" $n "$c";
	done
    else
	echo $0": $Prog not found!";
	exit 0;
    fi
}
#
#--------------------------------------------------------------
#
TestDir=`dirname $0`
FUSSY=../../fussy

#
#--------------------------------------------------------------
#
# Make a list of functional unit tests (file name convention: "test."+NAME)
tmp=`ls $TestDir/test.*`;
UnitTests=`for f in $tmp; do echo $f | grep -v out;done;`
Filter="2> /dev/null";

run "$FUSSY" "$UnitTests" "Unit" "$Filter"

#
#--------------------------------------------------------------
#
# Make a list of error-condition unit tests (file name convention: "error.test."+NAME)
tmp=`ls $TestDir/error.*`;
ErrorUnitTests=`for f in $tmp; do echo $f | grep -v out;done;`
Filter="2>&1 | grep -v Informational "

run "$FUSSY" "$ErrorUnitTests" "Error-condition" "$Filter"
#
#--------------------------------------------------------------
#

